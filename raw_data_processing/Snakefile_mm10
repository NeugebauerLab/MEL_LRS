SAMPLES = ["wt", "dmso"]

rule all:
     input:
         expand("data/10_final/{sample}.bed", sample=SAMPLES)

rule porechop:
    input:
        "data/0_samples/{sample}.fastq"
    output:
        "data/1_porechopped/{sample}_pc.fastq"
    shell:
        "porechop -i {input} -o {output} --extra_end_trim 0 --extra_middle_trim_good_side 0 --extra_middle_trim_bad_side 0 --min_split_read_size 100"

rule cutadapt_1:
    input:
        "data/1_porechopped/{sample}_pc.fastq"
    output:
        untrimmed="data/2_cutadapt_trimmed_1/{sample}_untrimmed.fastq",
        trim1="data/2_cutadapt_trimmed_1/{sample}_trim1.fastq"
    shell:
        "cutadapt -a CTGTAGGCACCATCAAT -e 0.1 -m 15 --untrimmed-output={output.untrimmed} --quiet -o {output.trim1} {input}"

rule fastx_rc:
    input:
        "data/2_cutadapt_trimmed_1/{sample}_untrimmed.fastq"
    output:
        "data/3_untrimmed_rc/{sample}_rc.fastq"
    shell:
        "fastx_reverse_complement -i {input} -o {output}"

rule cutadapt_2:
    input:
        "data/3_untrimmed_rc/{sample}_rc.fastq"
    output:
        "data/4_cutadapt_trimmed_2/{sample}_trim2.fastq"
    shell:
        "cutadapt -a CTGTAGGCACCATCAAT -e 0.1 -m 15 --discard-untrimmed --quiet -o {output} {input}"

rule combine_cutadapt:
    input:
        "data/2_cutadapt_trimmed_1/{sample}_trim1.fastq",
        "data/4_cutadapt_trimmed_2/{sample}_trim2.fastq"
    output:
        "data/5_cutadapt_trimmed_combined/{sample}_all_trimmed.fastq"
    shell:
        "cat {input} > {output}"

rule dereplicate:
    input:
        "data/5_cutadapt_trimmed_combined/{sample}_all_trimmed.fastq"
    output:
        good="data/6_dereplicated/{sample}_derep.fastq",
        dups="data/6_dereplicated/{sample}_PCR_duplicates.fastq"
    shell:
        "prinseq-lite.pl -fastq {input} -derep 1 -out_good data/6_dereplicated/{wildcards.sample}_derep -out_bad data/6_dereplicated/{wildcards.sample}_PCR_duplicates"

rule trim_5N:
    input:
        "data/6_dereplicated/{sample}_derep.fastq"
    output:
        "data/7_clean/{sample}_final.fastq"
    shell:
        "prinseq-lite.pl -fastq {input} -trim_left 6 -trim_right 5 -out_good data/7_clean/{wildcards.sample}_final"

rule minimap:
    input:
        genome="data/genome.fa",
        fastq="data/7_clean/{sample}_final.fastq"
    output:
        "data/8_mapped/sam/{sample}.sam"
    shell:
        "minimap2 -ax splice -uf -C5 --secondary=no {input.genome} {input.fastq} > {output}"

rule polyA_filter:
    input:
        "data/8_mapped/sam/{sample}.sam"
    output:
        "data/9_polyA_filtered/{sample}_polyAfiltered.sam"
    script:
        "scripts/filter_polyA.py"

rule sam_to_bam:
    input:
        "data/9_polyA_filtered/{sample}_polyAfiltered.sam"
    output:
        "data/9_polyA_filtered/bam/{sample}.bam"
    shell:
        "samtools view -S -b {input} > {output}"

rule filter_7sk:
    input:
        reads="data/9_polyA_filtered/bam/{sample}.bam",
        bedfile="data/7sk.bed"
    output:
        good="data/9_polyA_filtered/filter_7sk/{sample}_no7sk.bam",
        bad="data/9_polyA_filtered/filter_7sk/{sample}_7sk.bam"
    shell:
        "samtools view -b -L {input.bedfile} -U {output.good} {input.reads} > {output.bad}"

rule samtools_sort:
    input:
        "data/9_polyA_filtered/filter_7sk/{sample}_no7sk.bam"
    output:
        "data/10_final/{sample}_sorted.bam"
    shell:
        "samtools sort {input} -o {output}"

rule samtools_index:
    input:
        "data/10_final/{sample}_sorted.bam"
    output:
        "data/10_final/{sample}_sorted.bam.bai"
    shell:
        "samtools index {input}"

rule bamToBed:
    input:
        "data/10_final/{sample}_sorted.bam"
    output:
        "data/10_final/{sample}.bed"
    shell:
        "badToBed -bed12 -i {input} > {output}"
